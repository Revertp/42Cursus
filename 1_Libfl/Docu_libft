/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Docu_libft                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: areverte <areverte@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/09/20 17:33:41 by areverte          #+#    #+#             */
/*   Updated: 2022/09/22 14:47:17 by areverte         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

https://github.com/lionell15/libft/blob/master/README.md

int		ft_isalnum(int c);
int		ft_isalpha(int c);
int		ft_isprint(int c);
int		ft_isdigit(int c);
int		ft_isascii(int c);
size_t	ft_strlen(const char *c);
size_t	ft_strlcpy(char *dest, char *src, unsigned int size);
size_t	ft_strlcat(char *dest, char *src, unsigned int size);
char	*ft_strchr(const char *s, int c);
int		ft_strncmp(const char *s1, const char *s2, size_t n);
void	*ft_memchr(const void *s, int c, size_t n);
//memcpy.c
char	*ft_strrchr(const char *s, int c);
int		ft_memcmp(const void *str1, const void *str2, size_t n); //a mdio
char	*ft_strnstr(const char *haystack, const char *needle, size_t len);
int		ft_atoi(const char *str);
void	*ft_memset(void *s, int c, size_t len);

void	bzero(void *s, size_t n)
	The bzero() function erases the data in the n bytes of the memory starting at the location pointed to by s,
	by writing zeros (bytes containing '\0') to that area. // rellena de 0s n bytes una direccion de memoria

void	*memcpy(void *restrict dst, const void *restrict src, size_t n)
	The memcpy() function copies n bytes from memory area src to memory area
     dst.  If dst and src overlap, behavior is undefined. //copia n bytes de src a dst.

void *memmove(void *dst, const void *src, size_t len)
	The memmove() function copies len bytes from string src to string dst.
    The two strings may overlap; the copy is always done in a non-destructive manner.//copia de src a dest respetando lo que hay.

char	*ft_strdup(const char *s1);
	crea un malloc y pone ahi la info del src,y  lo devuelve

